substitutions:
  _REGISTRY: "us-central1-docker.pkg.dev"
  _REPO: "seda-data-proxy"
  _PROJECT: "seda-cloudbuild-4b791238"
  _IMAGE_NAME: "seda-data-proxy"

options:
  machineType: 'E2_HIGHCPU_8'
  dynamic_substitutions: true
  logging: CLOUD_LOGGING_ONLY

steps:
#
# Step 1: Configure Docker Auth
#
- name: 'gcr.io/cloud-builders/gcloud'
  id: 'auth'
  args:
    - 'auth'
    - 'configure-docker'
    - '${_REGISTRY}'
    - '--quiet'

#
# Step 2: Set up QEMU for Multi-Arch Builds
#
- name: 'gcr.io/cloud-builders/docker'
  id: 'setup-qemu'
  args:
    - 'run'
    - '--privileged'
    - 'multiarch/qemu-user-static'
    - '--reset'
    - '-p'
    - 'yes'

#
# Step 3: Build and Push AMD64 Image
#
- name: 'gcr.io/cloud-builders/docker'
  id: 'build-amd64'
  args:
    - 'build'
    - '--build-arg'
    - 'TARGET_ARCH=bun-linux-x64-modern'
    - '-t'
    - '${_REGISTRY}/${_PROJECT}/${_REPO}/${_IMAGE_NAME}:${TAG_NAME}-bun-linux-x64-modern'
    - '-f'
    - '.build/docker/Dockerfile'
    - '.'

- name: 'gcr.io/cloud-builders/docker'
  id: 'push-amd64'
  waitFor: ['auth', 'build-amd64']
  args:
    - 'push'
    - '${_REGISTRY}/${_PROJECT}/${_REPO}/${_IMAGE_NAME}:${TAG_NAME}-bun-linux-x64-modern'

#
# Step 4: Build and Push ARM64 Image
#
- name: 'gcr.io/cloud-builders/docker'
  id: 'build-arm64'
  args:
    - 'build'
    - '--platform'
    - 'linux/arm64'
    - '--build-arg'
    - 'TARGET_ARCH=bun-linux-arm64'
    - '-t'
    - '${_REGISTRY}/${_PROJECT}/${_REPO}/${_IMAGE_NAME}:${TAG_NAME}-bun-linux-arm64'
    - '-f'
    - '.build/docker/Dockerfile'
    - '.'

- name: 'gcr.io/cloud-builders/docker'
  id: 'push-arm64'
  waitFor: ['auth', 'build-arm64']
  args:
    - 'push'
    - '${_REGISTRY}/${_PROJECT}/${_REPO}/${_IMAGE_NAME}:${TAG_NAME}-bun-linux-arm64'

#
# Step 5: Create and Push Manifest List
#
- name: 'gcr.io/cloud-builders/docker'
  id: 'create-manifest'
  waitFor: ['push-amd64', 'push-arm64']
  entrypoint: 'bash'
  args:
    - '-c'
    - |
      docker manifest create \
        ${_REGISTRY}/${_PROJECT}/${_REPO}/${_IMAGE_NAME}:${TAG_NAME} \
        --amend ${_REGISTRY}/${_PROJECT}/${_REPO}/${_IMAGE_NAME}:${TAG_NAME}-bun-linux-x64-modern \
        --amend ${_REGISTRY}/${_PROJECT}/${_REPO}/${_IMAGE_NAME}:${TAG_NAME}-bun-linux-arm64
      docker manifest push ${_REGISTRY}/${_PROJECT}/${_REPO}/${_IMAGE_NAME}:${TAG_NAME}

#
# Step 6: Create GitHub Release
#
- name: 'node:18'
  id: 'create-release'
  waitFor: ['create-manifest']
  secretEnv: ['GITHUB_TOKEN']
  entrypoint: 'bash'
  args:
    - '-c'
    - |
      set -ex
      type -p curl >/dev/null || (apt-get update && apt-get install -y curl)
      curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg \
        && chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg \
        && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
        && apt-get update \
        && apt-get install -y gh jq

      echo "Configuring GitHub CLI..."
      TOKEN="$$GITHUB_TOKEN"
      unset GITHUB_TOKEN
      echo "$$TOKEN" | gh auth login --with-token
      gh auth status

      cat > release_notes.md << 'EOL'
      Release ${TAG_NAME} of SEDA Data Proxy

      ## Docker Images
      - `${_REGISTRY}/${_PROJECT}/${_REPO}/${_IMAGE_NAME}:${TAG_NAME}` (multi-arch manifest)
      - `${_REGISTRY}/${_PROJECT}/${_REPO}/${_IMAGE_NAME}:${TAG_NAME}-bun-linux-x64-modern` (AMD64)
      - `${_REGISTRY}/${_PROJECT}/${_REPO}/${_IMAGE_NAME}:${TAG_NAME}-bun-linux-arm64` (ARM64)

      ## Installation
      ```bash
      docker pull ${_REGISTRY}/${_PROJECT}/${_REPO}/${_IMAGE_NAME}:${TAG_NAME}
      docker pull ${_REGISTRY}/${_PROJECT}/${_REPO}/${_IMAGE_NAME}:${TAG_NAME}-bun-linux-x64-modern
      docker pull ${_REGISTRY}/${_PROJECT}/${_REPO}/${_IMAGE_NAME}:${TAG_NAME}-bun-linux-arm64
      ```
      EOL

      sed -i "s|\${TAG_NAME}|${TAG_NAME}|g" release_notes.md
      sed -i "s|\${_REGISTRY}|${_REGISTRY}|g" release_notes.md
      sed -i "s|\${_PROJECT}|${_PROJECT}|g" release_notes.md
      sed -i "s|\${_REPO}|${_REPO}|g" release_notes.md
      sed -i "s|\${_IMAGE_NAME}|${_IMAGE_NAME}|g" release_notes.md

      gh release create "${TAG_NAME}" \
        --repo "sedaprotocol/seda-data-proxy" \
        --title "Release ${TAG_NAME}" \
        --notes-file release_notes.md \
        --generate-notes \
        --verify-tag

      gh release view "${TAG_NAME}" --repo "sedaprotocol/seda-data-proxy" --json url,tagName,name | jq .

availableSecrets:
  secretManager:
    - versionName: projects/${_PROJECT}/secrets/github-token/versions/latest
      env: 'GITHUB_TOKEN'

timeout: '3600s'
images:
  - '${_REGISTRY}/${_PROJECT}/${_REPO}/${_IMAGE_NAME}:${TAG_NAME}-bun-linux-x64-modern'
  - '${_REGISTRY}/${_PROJECT}/${_REPO}/${_IMAGE_NAME}:${TAG_NAME}-bun-linux-arm64'
