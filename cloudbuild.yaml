# cloudbuild.yaml
# Multi-architecture build configuration for SEDA Data Proxy
# Triggered on tag pushes to build AMD64 and ARM64 images

substitutions:
  _REGISTRY: "us-central1-docker.pkg.dev"
  _REPO: "manual-dp-build-repo"                    #FIXME: Will change to a stable Artifact Registry repo once done with the testing!
  _PROJECT: "perf-testing-infra-af6aff"            #FIXME: We'll have separate project just for builds, so that it is always in a predictable spot.
  _IMAGE_NAME: "seda-data-proxy"

# Required for multi-arch builds
options:
  machineType: 'E2_HIGHCPU_8'
  dynamic_substitutions: true
  logging: CLOUD_LOGGING_ONLY

steps:
# ─────────────────────────────────────────────
# Step 1: Set up QEMU for multi-architecture builds
# ─────────────────────────────────────────────
- name: 'gcr.io/cloud-builders/docker'
  id: 'setup-qemu'
  args:
    - 'run'
    - '--privileged'
    - 'multiarch/qemu-user-static'
    - '--reset'
    - '-p'
    - 'yes'

# ─────────────────────────────────────────────
# Step 2: Build and push AMD64 image
# ─────────────────────────────────────────────
- name: 'gcr.io/cloud-builders/docker'
  id: 'build-amd64'
  args:
    - 'build'
    - '--build-arg'
    - 'TARGET_ARCH=bun-linux-x64-modern'
    - '-t'
    - '${_REGISTRY}/${_PROJECT}/${_REPO}/${_IMAGE_NAME}:${TAG_NAME}-bun-linux-x64-modern'
    - '-f'
    - '.build/docker/Dockerfile'
    - '.'

- name: 'gcr.io/cloud-builders/docker'
  id: 'push-amd64'
  args:
    - 'push'
    - '${_REGISTRY}/${_PROJECT}/${_REPO}/${_IMAGE_NAME}:${TAG_NAME}-bun-linux-x64-modern'

# ─────────────────────────────────────────────
# Step 3: Build and push ARM64 image
# ─────────────────────────────────────────────
- name: 'gcr.io/cloud-builders/docker'
  id: 'build-arm64'
  args:
    - 'build'
    - '--platform'
    - 'linux/arm64'
    - '--build-arg'
    - 'TARGET_ARCH=bun-linux-arm64'
    - '-t'
    - '${_REGISTRY}/${_PROJECT}/${_REPO}/${_IMAGE_NAME}:${TAG_NAME}-bun-linux-arm64'
    - '-f'
    - '.build/docker/Dockerfile'
    - '.'

- name: 'gcr.io/cloud-builders/docker'
  id: 'push-arm64'
  args:
    - 'push'
    - '${_REGISTRY}/${_PROJECT}/${_REPO}/${_IMAGE_NAME}:${TAG_NAME}-bun-linux-arm64'

# ─────────────────────────────────────────────
# Step 4: Create and push manifest list
# ─────────────────────────────────────────────
- name: 'gcr.io/cloud-builders/docker'
  id: 'create-manifest'
  entrypoint: 'bash'
  args:
    - '-c'
    - |
      docker manifest create \
        ${_REGISTRY}/${_PROJECT}/${_REPO}/${_IMAGE_NAME}:${TAG_NAME} \
        --amend ${_REGISTRY}/${_PROJECT}/${_REPO}/${_IMAGE_NAME}:${TAG_NAME}-bun-linux-x64-modern \
        --amend ${_REGISTRY}/${_PROJECT}/${_REPO}/${_IMAGE_NAME}:${TAG_NAME}-bun-linux-arm64
      docker manifest push ${_REGISTRY}/${_PROJECT}/${_REPO}/${_IMAGE_NAME}:${TAG_NAME}

# ─────────────────────────────────────────────
# Step 5: Create GitHub Release with Changelog
# ─────────────────────────────────────────────
- name: 'node:18'
  id: 'create-release'
  secretEnv: ['GITHUB_TOKEN']
  entrypoint: 'bash'
  args:
    - '-c'
    - |
      # Install GitHub CLI
      curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
      echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | tee /etc/apt/sources.list.d/github-cli.list > /dev/null
      apt update
      apt install gh -y

      # Install conventional-changelog
      npm install -g conventional-changelog-cli

      # Generate changelog
      conventional-changelog -p angular -i CHANGELOG.md -s -r 1 > release_notes.md

      # Create GitHub release
      export GITHUB_TOKEN=$$GITHUB_TOKEN
      gh release create ${TAG_NAME} \
        --title "${TAG_NAME}" \
        --notes-file release_notes.md \
        --generate-notes

# ─────────────────────────────────────────────
# Configure secrets
# ─────────────────────────────────────────────
availableSecrets:
  secretManager:
    - versionName: projects/${_PROJECT}/secrets/github-token/versions/latest
      env: 'GITHUB_TOKEN'

# ─────────────────────────────────────────────
# Set timeout and artifacts
# ─────────────────────────────────────────────
timeout: '3600s'
images:
  - '${_REGISTRY}/${_PROJECT}/${_REPO}/${_IMAGE_NAME}:${TAG_NAME}'
  - '${_REGISTRY}/${_PROJECT}/${_REPO}/${_IMAGE_NAME}:${TAG_NAME}-bun-linux-x64-modern'
  - '${_REGISTRY}/${_PROJECT}/${_REPO}/${_IMAGE_NAME}:${TAG_NAME}-bun-linux-arm64' 