// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.178.0
//   protoc               unknown
// source: sedachain/randomness/v1/randomness.proto

/* eslint-disable */
import _m0 from "protobufjs/minimal.js";
import { Any } from "../../../google/protobuf/any.js";

/** ValidatorVRF is the randomness validator's VRF key information */
export interface ValidatorVRF {
  /**
   * operator_address defines the address of the validator's operator; bech
   * encoded in JSON.
   */
  operatorAddress: string;
  /** vrf_pubkey is the public key of the validator's VRF key pair */
  vrfPubkey: Any | undefined;
}

function createBaseValidatorVRF(): ValidatorVRF {
  return { operatorAddress: "", vrfPubkey: undefined };
}

export const ValidatorVRF = {
  encode(message: ValidatorVRF, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.operatorAddress !== "") {
      writer.uint32(10).string(message.operatorAddress);
    }
    if (message.vrfPubkey !== undefined) {
      Any.encode(message.vrfPubkey, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ValidatorVRF {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseValidatorVRF();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.operatorAddress = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.vrfPubkey = Any.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ValidatorVRF {
    return {
      operatorAddress: isSet(object.operatorAddress) ? globalThis.String(object.operatorAddress) : "",
      vrfPubkey: isSet(object.vrfPubkey) ? Any.fromJSON(object.vrfPubkey) : undefined,
    };
  },

  toJSON(message: ValidatorVRF): unknown {
    const obj: any = {};
    if (message.operatorAddress !== "") {
      obj.operatorAddress = message.operatorAddress;
    }
    if (message.vrfPubkey !== undefined) {
      obj.vrfPubkey = Any.toJSON(message.vrfPubkey);
    }
    return obj;
  },

  create(base?: DeepPartial<ValidatorVRF>): ValidatorVRF {
    return ValidatorVRF.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ValidatorVRF>): ValidatorVRF {
    const message = createBaseValidatorVRF();
    message.operatorAddress = object.operatorAddress ?? "";
    message.vrfPubkey = (object.vrfPubkey !== undefined && object.vrfPubkey !== null)
      ? Any.fromPartial(object.vrfPubkey)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
