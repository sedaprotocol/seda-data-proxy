// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.178.0
//   protoc               unknown
// source: sedachain/randomness/v1/query.proto

/* eslint-disable */
import Long from "long";
import _m0 from "protobufjs/minimal.js";

/** The message for getting the random modules seed. */
export interface QuerySeedRequest {
}

/** The message for returning the random modules seed. */
export interface QuerySeedResponse {
  seed: string;
  blockHeight: number;
}

function createBaseQuerySeedRequest(): QuerySeedRequest {
  return {};
}

export const QuerySeedRequest = {
  encode(_: QuerySeedRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QuerySeedRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQuerySeedRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): QuerySeedRequest {
    return {};
  },

  toJSON(_: QuerySeedRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<QuerySeedRequest>): QuerySeedRequest {
    return QuerySeedRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<QuerySeedRequest>): QuerySeedRequest {
    const message = createBaseQuerySeedRequest();
    return message;
  },
};

function createBaseQuerySeedResponse(): QuerySeedResponse {
  return { seed: "", blockHeight: 0 };
}

export const QuerySeedResponse = {
  encode(message: QuerySeedResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.seed !== "") {
      writer.uint32(10).string(message.seed);
    }
    if (message.blockHeight !== 0) {
      writer.uint32(16).int64(message.blockHeight);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QuerySeedResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQuerySeedResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.seed = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.blockHeight = longToNumber(reader.int64() as Long);
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QuerySeedResponse {
    return {
      seed: isSet(object.seed) ? globalThis.String(object.seed) : "",
      blockHeight: isSet(object.blockHeight) ? globalThis.Number(object.blockHeight) : 0,
    };
  },

  toJSON(message: QuerySeedResponse): unknown {
    const obj: any = {};
    if (message.seed !== "") {
      obj.seed = message.seed;
    }
    if (message.blockHeight !== 0) {
      obj.blockHeight = Math.round(message.blockHeight);
    }
    return obj;
  },

  create(base?: DeepPartial<QuerySeedResponse>): QuerySeedResponse {
    return QuerySeedResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QuerySeedResponse>): QuerySeedResponse {
    const message = createBaseQuerySeedResponse();
    message.seed = object.seed ?? "";
    message.blockHeight = object.blockHeight ?? 0;
    return message;
  },
};

/** Query Service is the definition for the random modules gRPC query methods. */
export interface Query {
  /** For getting the random modules seed. */
  Seed(request: QuerySeedRequest): Promise<QuerySeedResponse>;
}

export const QueryServiceName = "sedachain.randomness.v1.Query";
export class QueryClientImpl implements Query {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || QueryServiceName;
    this.rpc = rpc;
    this.Seed = this.Seed.bind(this);
  }
  Seed(request: QuerySeedRequest): Promise<QuerySeedResponse> {
    const data = QuerySeedRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Seed", data);
    return promise.then((data) => QuerySeedResponse.decode(_m0.Reader.create(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function longToNumber(long: Long): number {
  if (long.gt(globalThis.Number.MAX_SAFE_INTEGER)) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (long.lt(globalThis.Number.MIN_SAFE_INTEGER)) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return long.toNumber();
}

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
