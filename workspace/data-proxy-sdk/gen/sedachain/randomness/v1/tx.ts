// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.178.0
//   protoc               unknown
// source: sedachain/randomness/v1/tx.proto

/* eslint-disable */
import _m0 from "protobufjs/minimal.js";

/** The message for submitting a new seed to the chain. */
export interface MsgNewSeed {
  /** address of VRF key used to produce proof */
  prover: string;
  /** VRF proof */
  pi: string;
  /** VRF hash */
  beta: string;
}

/** The response message for submitting a new seed to the chain. */
export interface MsgNewSeedResponse {
}

function createBaseMsgNewSeed(): MsgNewSeed {
  return { prover: "", pi: "", beta: "" };
}

export const MsgNewSeed = {
  encode(message: MsgNewSeed, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.prover !== "") {
      writer.uint32(10).string(message.prover);
    }
    if (message.pi !== "") {
      writer.uint32(18).string(message.pi);
    }
    if (message.beta !== "") {
      writer.uint32(26).string(message.beta);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgNewSeed {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgNewSeed();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.prover = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.pi = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.beta = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgNewSeed {
    return {
      prover: isSet(object.prover) ? globalThis.String(object.prover) : "",
      pi: isSet(object.pi) ? globalThis.String(object.pi) : "",
      beta: isSet(object.beta) ? globalThis.String(object.beta) : "",
    };
  },

  toJSON(message: MsgNewSeed): unknown {
    const obj: any = {};
    if (message.prover !== "") {
      obj.prover = message.prover;
    }
    if (message.pi !== "") {
      obj.pi = message.pi;
    }
    if (message.beta !== "") {
      obj.beta = message.beta;
    }
    return obj;
  },

  create(base?: DeepPartial<MsgNewSeed>): MsgNewSeed {
    return MsgNewSeed.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MsgNewSeed>): MsgNewSeed {
    const message = createBaseMsgNewSeed();
    message.prover = object.prover ?? "";
    message.pi = object.pi ?? "";
    message.beta = object.beta ?? "";
    return message;
  },
};

function createBaseMsgNewSeedResponse(): MsgNewSeedResponse {
  return {};
}

export const MsgNewSeedResponse = {
  encode(_: MsgNewSeedResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgNewSeedResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgNewSeedResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgNewSeedResponse {
    return {};
  },

  toJSON(_: MsgNewSeedResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<MsgNewSeedResponse>): MsgNewSeedResponse {
    return MsgNewSeedResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<MsgNewSeedResponse>): MsgNewSeedResponse {
    const message = createBaseMsgNewSeedResponse();
    return message;
  },
};

/** Msg service defines the gRPC tx methods. */
export interface Msg {
  /** NewSeed defines a method for submitting a new seed to the chain. */
  NewSeed(request: MsgNewSeed): Promise<MsgNewSeedResponse>;
}

export const MsgServiceName = "sedachain.randomness.v1.Msg";
export class MsgClientImpl implements Msg {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || MsgServiceName;
    this.rpc = rpc;
    this.NewSeed = this.NewSeed.bind(this);
  }
  NewSeed(request: MsgNewSeed): Promise<MsgNewSeedResponse> {
    const data = MsgNewSeed.encode(request).finish();
    const promise = this.rpc.request(this.service, "NewSeed", data);
    return promise.then((data) => MsgNewSeedResponse.decode(_m0.Reader.create(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
