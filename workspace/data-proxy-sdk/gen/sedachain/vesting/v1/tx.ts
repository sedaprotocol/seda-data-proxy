// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.178.0
//   protoc               unknown
// source: sedachain/vesting/v1/tx.proto

/* eslint-disable */
import Long from "long";
import _m0 from "protobufjs/minimal.js";
import { Coin } from "../../../cosmos/base/v1beta1/coin.js";

/** MsgCreateVestingAccount defines a message that creates a vesting account. */
export interface MsgCreateVestingAccount {
  fromAddress: string;
  toAddress: string;
  amount: Coin[];
  /** end of vesting as unix time (in seconds). */
  endTime: number;
  /** if true, leave funder field empty and disable clawback */
  disableClawback: boolean;
}

/**
 * MsgCreateVestingAccountResponse defines the CreateVestingAccount response
 * type.
 */
export interface MsgCreateVestingAccountResponse {
}

/** MsgClawback defines a message that returns the vesting funds to the funder. */
export interface MsgClawback {
  /** funder_address is the address which funded the account. */
  funderAddress: string;
  /** account_address is the address of the vesting to claw back from. */
  accountAddress: string;
}

/** MsgClawbackResponse defines the MsgClawback response type. */
export interface MsgClawbackResponse {
  clawedUnbonded: Coin[];
  clawedUnbonding: Coin[];
  clawedBonded: Coin[];
}

function createBaseMsgCreateVestingAccount(): MsgCreateVestingAccount {
  return { fromAddress: "", toAddress: "", amount: [], endTime: 0, disableClawback: false };
}

export const MsgCreateVestingAccount = {
  encode(message: MsgCreateVestingAccount, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.fromAddress !== "") {
      writer.uint32(10).string(message.fromAddress);
    }
    if (message.toAddress !== "") {
      writer.uint32(18).string(message.toAddress);
    }
    for (const v of message.amount) {
      Coin.encode(v!, writer.uint32(26).fork()).ldelim();
    }
    if (message.endTime !== 0) {
      writer.uint32(32).int64(message.endTime);
    }
    if (message.disableClawback !== false) {
      writer.uint32(40).bool(message.disableClawback);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgCreateVestingAccount {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCreateVestingAccount();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.fromAddress = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.toAddress = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.amount.push(Coin.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.endTime = longToNumber(reader.int64() as Long);
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.disableClawback = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgCreateVestingAccount {
    return {
      fromAddress: isSet(object.fromAddress) ? globalThis.String(object.fromAddress) : "",
      toAddress: isSet(object.toAddress) ? globalThis.String(object.toAddress) : "",
      amount: globalThis.Array.isArray(object?.amount) ? object.amount.map((e: any) => Coin.fromJSON(e)) : [],
      endTime: isSet(object.endTime) ? globalThis.Number(object.endTime) : 0,
      disableClawback: isSet(object.disableClawback) ? globalThis.Boolean(object.disableClawback) : false,
    };
  },

  toJSON(message: MsgCreateVestingAccount): unknown {
    const obj: any = {};
    if (message.fromAddress !== "") {
      obj.fromAddress = message.fromAddress;
    }
    if (message.toAddress !== "") {
      obj.toAddress = message.toAddress;
    }
    if (message.amount?.length) {
      obj.amount = message.amount.map((e) => Coin.toJSON(e));
    }
    if (message.endTime !== 0) {
      obj.endTime = Math.round(message.endTime);
    }
    if (message.disableClawback !== false) {
      obj.disableClawback = message.disableClawback;
    }
    return obj;
  },

  create(base?: DeepPartial<MsgCreateVestingAccount>): MsgCreateVestingAccount {
    return MsgCreateVestingAccount.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MsgCreateVestingAccount>): MsgCreateVestingAccount {
    const message = createBaseMsgCreateVestingAccount();
    message.fromAddress = object.fromAddress ?? "";
    message.toAddress = object.toAddress ?? "";
    message.amount = object.amount?.map((e) => Coin.fromPartial(e)) || [];
    message.endTime = object.endTime ?? 0;
    message.disableClawback = object.disableClawback ?? false;
    return message;
  },
};

function createBaseMsgCreateVestingAccountResponse(): MsgCreateVestingAccountResponse {
  return {};
}

export const MsgCreateVestingAccountResponse = {
  encode(_: MsgCreateVestingAccountResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgCreateVestingAccountResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCreateVestingAccountResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgCreateVestingAccountResponse {
    return {};
  },

  toJSON(_: MsgCreateVestingAccountResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<MsgCreateVestingAccountResponse>): MsgCreateVestingAccountResponse {
    return MsgCreateVestingAccountResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<MsgCreateVestingAccountResponse>): MsgCreateVestingAccountResponse {
    const message = createBaseMsgCreateVestingAccountResponse();
    return message;
  },
};

function createBaseMsgClawback(): MsgClawback {
  return { funderAddress: "", accountAddress: "" };
}

export const MsgClawback = {
  encode(message: MsgClawback, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.funderAddress !== "") {
      writer.uint32(10).string(message.funderAddress);
    }
    if (message.accountAddress !== "") {
      writer.uint32(18).string(message.accountAddress);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgClawback {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgClawback();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.funderAddress = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.accountAddress = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgClawback {
    return {
      funderAddress: isSet(object.funderAddress) ? globalThis.String(object.funderAddress) : "",
      accountAddress: isSet(object.accountAddress) ? globalThis.String(object.accountAddress) : "",
    };
  },

  toJSON(message: MsgClawback): unknown {
    const obj: any = {};
    if (message.funderAddress !== "") {
      obj.funderAddress = message.funderAddress;
    }
    if (message.accountAddress !== "") {
      obj.accountAddress = message.accountAddress;
    }
    return obj;
  },

  create(base?: DeepPartial<MsgClawback>): MsgClawback {
    return MsgClawback.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MsgClawback>): MsgClawback {
    const message = createBaseMsgClawback();
    message.funderAddress = object.funderAddress ?? "";
    message.accountAddress = object.accountAddress ?? "";
    return message;
  },
};

function createBaseMsgClawbackResponse(): MsgClawbackResponse {
  return { clawedUnbonded: [], clawedUnbonding: [], clawedBonded: [] };
}

export const MsgClawbackResponse = {
  encode(message: MsgClawbackResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.clawedUnbonded) {
      Coin.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    for (const v of message.clawedUnbonding) {
      Coin.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    for (const v of message.clawedBonded) {
      Coin.encode(v!, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgClawbackResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgClawbackResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.clawedUnbonded.push(Coin.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.clawedUnbonding.push(Coin.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.clawedBonded.push(Coin.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgClawbackResponse {
    return {
      clawedUnbonded: globalThis.Array.isArray(object?.clawedUnbonded)
        ? object.clawedUnbonded.map((e: any) => Coin.fromJSON(e))
        : [],
      clawedUnbonding: globalThis.Array.isArray(object?.clawedUnbonding)
        ? object.clawedUnbonding.map((e: any) => Coin.fromJSON(e))
        : [],
      clawedBonded: globalThis.Array.isArray(object?.clawedBonded)
        ? object.clawedBonded.map((e: any) => Coin.fromJSON(e))
        : [],
    };
  },

  toJSON(message: MsgClawbackResponse): unknown {
    const obj: any = {};
    if (message.clawedUnbonded?.length) {
      obj.clawedUnbonded = message.clawedUnbonded.map((e) => Coin.toJSON(e));
    }
    if (message.clawedUnbonding?.length) {
      obj.clawedUnbonding = message.clawedUnbonding.map((e) => Coin.toJSON(e));
    }
    if (message.clawedBonded?.length) {
      obj.clawedBonded = message.clawedBonded.map((e) => Coin.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<MsgClawbackResponse>): MsgClawbackResponse {
    return MsgClawbackResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MsgClawbackResponse>): MsgClawbackResponse {
    const message = createBaseMsgClawbackResponse();
    message.clawedUnbonded = object.clawedUnbonded?.map((e) => Coin.fromPartial(e)) || [];
    message.clawedUnbonding = object.clawedUnbonding?.map((e) => Coin.fromPartial(e)) || [];
    message.clawedBonded = object.clawedBonded?.map((e) => Coin.fromPartial(e)) || [];
    return message;
  },
};

/** Msg defines the vesting Msg service. */
export interface Msg {
  /** CreateVestingAccount creates a new vesting account. */
  CreateVestingAccount(request: MsgCreateVestingAccount): Promise<MsgCreateVestingAccountResponse>;
  /** Clawback returns the vesting funds back to the funder. */
  Clawback(request: MsgClawback): Promise<MsgClawbackResponse>;
}

export const MsgServiceName = "sedachain.vesting.v1.Msg";
export class MsgClientImpl implements Msg {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || MsgServiceName;
    this.rpc = rpc;
    this.CreateVestingAccount = this.CreateVestingAccount.bind(this);
    this.Clawback = this.Clawback.bind(this);
  }
  CreateVestingAccount(request: MsgCreateVestingAccount): Promise<MsgCreateVestingAccountResponse> {
    const data = MsgCreateVestingAccount.encode(request).finish();
    const promise = this.rpc.request(this.service, "CreateVestingAccount", data);
    return promise.then((data) => MsgCreateVestingAccountResponse.decode(_m0.Reader.create(data)));
  }

  Clawback(request: MsgClawback): Promise<MsgClawbackResponse> {
    const data = MsgClawback.encode(request).finish();
    const promise = this.rpc.request(this.service, "Clawback", data);
    return promise.then((data) => MsgClawbackResponse.decode(_m0.Reader.create(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function longToNumber(long: Long): number {
  if (long.gt(globalThis.Number.MAX_SAFE_INTEGER)) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (long.lt(globalThis.Number.MIN_SAFE_INTEGER)) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return long.toNumber();
}

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
