syntax = "proto3";
package sedachain.wasm_storage.v1;

import "cosmos/base/v1beta1/coin.proto";
import "cosmos/msg/v1/msg.proto";
import "gogoproto/gogo.proto";
import "cosmos_proto/cosmos.proto";
import "sedachain/wasm_storage/v1/wasm_storage.proto";

option go_package = "github.com/sedaprotocol/seda-chain/x/wasm-storage/types";

// Msg service defines the wasm-storage tx gRPC methods.
service Msg {
  // The StoreDataRequestWasm method stores a dr wasm in the wasm-storage
  // module.
  rpc StoreDataRequestWasm(MsgStoreDataRequestWasm)
      returns (MsgStoreDataRequestWasmResponse);
  // The StoreOverlayWasm method stores an overlay wasm in the wasm-storage
  // module.
  rpc StoreOverlayWasm(MsgStoreOverlayWasm)
      returns (MsgStoreOverlayWasmResponse);
  // The InstantiateAndRegisterCoreContract method instantiates the Core
  // Contract and registers its address.
  rpc InstantiateAndRegisterCoreContract(
      MsgInstantiateAndRegisterCoreContract)
      returns (MsgInstantiateAndRegisterCoreContractResponse);
  // The UpdateParams method updates the module's parameters.
  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);
}

// The request message for the StoreDataRequestWasm method.
message MsgStoreDataRequestWasm {
  option (cosmos.msg.v1.signer) = "sender";

  string sender = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  bytes wasm = 2;
}

// The response message for the StoreDataRequestWasm method.
message MsgStoreDataRequestWasmResponse { string hash = 1; }

// The request message for the StoreOverlayWasm method.
message MsgStoreOverlayWasm {
  option (cosmos.msg.v1.signer) = "sender";

  string sender = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  bytes wasm = 2;
  WasmType wasm_type = 3;
}

// The response message for the StoreOverlayWasm method.
message MsgStoreOverlayWasmResponse { string hash = 1; }

// The request message for the InstantiateAndRegisterCoreContract method.
message MsgInstantiateAndRegisterCoreContract {
  option (cosmos.msg.v1.signer) = "sender";

  string sender = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  string admin = 2 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  uint64 code_id = 3 [ (gogoproto.customname) = "CodeID" ];
  string label = 4;
  bytes msg = 5
      [ (gogoproto.casttype) =
            "github.com/CosmWasm/wasmd/x/wasm/types.RawContractMessage" ];
  repeated cosmos.base.v1beta1.Coin funds = 6 [
    (gogoproto.nullable) = false,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];
  bytes salt = 7;
  bool fix_msg = 8;
}

// The response message for the InstantiateAndRegisterCoreContract method.
message MsgInstantiateAndRegisterCoreContractResponse {
  string contract_address = 1
      [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
}

// The request message for the UpdateParams method.
message MsgUpdateParams {
  option (cosmos.msg.v1.signer) = "authority";

  // authority is the address that controls the module (defaults to x/gov unless
  // overwritten).
  string authority = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  Params params = 2 [ (gogoproto.nullable) = false ];
}

// no data needs to be returned
message MsgUpdateParamsResponse {}