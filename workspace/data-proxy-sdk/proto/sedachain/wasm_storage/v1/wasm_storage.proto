syntax = "proto3";
package sedachain.wasm_storage.v1;

import "gogoproto/gogo.proto";
import "google/protobuf/timestamp.proto";

option go_package = "github.com/sedaprotocol/seda-chain/x/wasm-storage/types";

// A Wasm msg.
message Wasm {
  bytes hash = 1;
  bytes bytecode = 2;
  WasmType wasm_type = 3;
  google.protobuf.Timestamp added_at = 4
      [ (gogoproto.stdtime) = true, (gogoproto.nullable) = false ];
  // ExpirationHeight represents the block height at which the data request
  // wasm will be pruned. The value of zero means no expiration.
  int64 expiration_height = 5;
}

// WasmType is an enum for the type of wasm.
enum WasmType {
  option (gogoproto.goproto_enum_prefix) = false;

  // WASM_TYPE_DATA_REQUEST is for data request and tally wasms.
  WASM_TYPE_DATA_REQUEST = 0
      [ (gogoproto.enumvalue_customname) = "WasmTypeDataRequest" ];
  // WASM_TYPE_DATA_REQUEST_EXECUTOR is for overlay executors.
  WASM_TYPE_DATA_REQUEST_EXECUTOR = 1
      [ (gogoproto.enumvalue_customname) = "WasmTypeDataRequestExecutor" ];
  // WASM_TYPE_RELAYER is for overlay relayers.
  WASM_TYPE_RELAYER = 2
      [ (gogoproto.enumvalue_customname) = "WasmTypeRelayer" ];
}

// Params to define the max wasm size allowed.
message Params {
  option (gogoproto.equal) = true;

  int64 max_wasm_size = 1;
  // WasmTTL represents the number of blocks a wasm's life is extended when it's
  // created or used.
  int64 wasm_ttl = 2 [ (gogoproto.customname) = "WasmTTL" ];
}
